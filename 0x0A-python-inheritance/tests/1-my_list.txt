# 1-my_list.txt

=======================
How to Use 1-my_list.py
=======================

This module defines a class ``MyList`` that inherits from ``list``.

Instantiation
=============

`MyList` can be instantiated with no arguments, which will return
an empty list:

```python
>>> MyList = __import__('1-my_list').MyList
>>> my_list = MyList()
>>> type(my_list)
<class '1-my_list.MyList'>

>>> print(my_list) 
[]

>>> my_list = MyList([1, 2, 3])
>>> print(my_list)
[1, 2, 3]

>>> my_list = MyList(None)
Traceback (most recent call last):
TypeError: 'NoneType' object is not iterable


Usage
=====

`MyList` is an inherited `list` class, featuring the same methods. For example, elements can be added, replaced, and removed.

>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(2)
>>> my_list.append(3)
>>> print(my_list)
[1, 2, 3]

# Replacing with indexing:
>>> my_list[0] = 5
>>> print(my_list)
[5, 2, 3]

# Removing with the remove() method:
>>> my_list.remove(5)
>>> print(my_list)
[2, 3]

`print_sorted` Method
=====================

`MyList` implements a single method - a public instance method `print_sorted(self)`.

>>> my_list = MyList()
>>> print(my_list.print_sorted)
<bound method MyList.print_sorted of []>


# The method takes no arguments - a TypeError will be raised if an argument is provided.

>>> my_list.print_sorted(1)
Traceback (most recent call last):
TypeError: print_sorted() takes 1 positional argument but 2 were given


# Prints the list in ascending sorted order:
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]

# Sorting and printing:
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]

# Original:
>>> print(my_list)
[1, 4, 2, 3, 5]


>>> my_list = MyList()
>>> my_list.append("Brennan")
>>> my_list.append("Poppy")
>>> my_list.append("School")
>>> my_list.append("Holberton")
>>> my_list.append("Betty")
>>> print(my_list)
['Brennan', 'Poppy', 'School', 'Holberton', 'Betty']

# Sorting and printing:
>>> my_list.print_sorted()
['Betty', 'Brennan', 'Holberton', 'Poppy', 'School']

# Original:
>>> print(my_list)
['Brennan', 'Poppy', 'School', 'Holberton', 'Betty']


# Empty lists result in no sorting:
>>> my_list = MyList()
>>> my_list.print_sorted()
[]
